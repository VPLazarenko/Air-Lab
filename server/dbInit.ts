import { openaiService } from "./openai";
import { storage } from "./storage";
import type { InsertAssistant, InsertUser } from "@shared/schema";

// Demo data for initialization
const DEMO_USER_ID = "demo-user-123";

const DEMO_USER: InsertUser = {
  username: "demo",
  email: "demo@example.com",
  settings: {},
};

const DEMO_ASSISTANTS = [
  {
    name: "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
    instructions: "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é.",
    tools: [{ type: 'file_search', enabled: true }],
    userId: DEMO_USER_ID,
  },
  {
    name: "–ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", 
    instructions: "–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –≤–µ–∂–ª–∏–≤–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
    tools: [],
    userId: DEMO_USER_ID,
  },
];

/**
 * Initialize database with demo data if empty
 */
export async function initializeDatabase() {
  try {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // Check if demo user exists
    const existingUser = await storage.getUser(DEMO_USER_ID);
    if (!existingUser) {
      console.log("üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
      await storage.createUser(DEMO_USER);
    }

    // Check existing assistants
    const existingAssistants = await storage.getAssistantsByUserId(DEMO_USER_ID);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤: ${existingAssistants.length}`);

    // Create missing demo assistants
    for (const assistantData of DEMO_ASSISTANTS) {
      const existingAssistant = existingAssistants.find(a => a.name === assistantData.name);
      
      if (!existingAssistant) {
        console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${assistantData.name}`);
        
        try {
          // Create assistant in OpenAI first
          const openaiAssistant = await openaiService.createAssistant({
            name: assistantData.name,
            instructions: assistantData.instructions || "",
            tools: assistantData.tools.map(tool => ({ type: 'file_search' })),
          });

          // Save to database
          await storage.createAssistant({
            name: assistantData.name,
            instructions: assistantData.instructions,
            tools: assistantData.tools,
            userId: assistantData.userId,
            openaiId: openaiAssistant.id,
          });

          console.log(`‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç "${assistantData.name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ "${assistantData.name}":`, error);
        }
      } else {
        console.log(`‚úì –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç "${assistantData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        
        // Verify OpenAI assistant still exists
        if (existingAssistant.openaiAssistantId) {
          try {
            await openaiService.getAssistantById(existingAssistant.openaiAssistantId);
            console.log(`‚úì OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ${existingAssistant.openaiAssistantId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω`);
          } catch (error) {
            console.log(`‚ö†Ô∏è OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ${existingAssistant.openaiAssistantId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...`);
            
            try {
              // Recreate OpenAI assistant
              const newOpenaiAssistant = await openaiService.createAssistant({
                name: existingAssistant.name,
                instructions: existingAssistant.instructions || "",
                tools: (existingAssistant.tools || []).map(() => ({ type: 'file_search' })),
              });

              // Update database
              await storage.updateAssistant(existingAssistant.id, {
                openaiId: newOpenaiAssistant.id,
              });

              console.log(`‚úÖ OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${newOpenaiAssistant.id}`);
            } catch (recreateError) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:`, recreateError);
            }
          }
        }
      }
    }

    // Check Google Drive documents
    const allGoogleDocs = await storage.getGoogleDocsDocumentsByUserId(DEMO_USER_ID);
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ Google Docs: ${allGoogleDocs.length}`);

    console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    
    return {
      user: existingUser || DEMO_USER,
      assistantsCount: (await storage.getAssistantsByUserId(DEMO_USER_ID)).length,
      googleDocsCount: allGoogleDocs.length,
    };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    throw error;
  }
}

/**
 * Ensure critical data is preserved and restored if missing
 */
export async function ensureDataIntegrity() {
  try {
    const assistants = await storage.getAssistantsByUserId(DEMO_USER_ID);
    
    for (const assistant of assistants) {
      if (!assistant.openaiAssistantId) {
        console.log(`‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç ${assistant.name} –±–µ–∑ OpenAI ID, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...`);
        
        try {
          const openaiAssistant = await openaiService.createAssistant({
            name: assistant.name,
            instructions: assistant.instructions || "",
            tools: (assistant.tools || []).map(() => ({ type: 'file_search' })),
          });

          await storage.updateAssistant(assistant.id, {
            openaiId: openaiAssistant.id,
          });

          console.log(`‚úÖ OpenAI ID –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${assistant.name}: ${openaiAssistant.id}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è OpenAI ID –¥–ª—è ${assistant.name}:`, error);
        }
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
  }
}