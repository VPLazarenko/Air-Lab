import { useAuth } from "@/hooks/useAuth";
import { useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { User, Settings, Crown, Calendar, Bot, LogOut, AlertTriangle, Clock, CreditCard } from "lucide-react";
import type { Assistant } from "@shared/schema";
import Footer from "@/components/Footer";
import { TariffActivationForm } from "@/components/tariff-activation-form";
import { useState } from "react";

export default function UserProfile() {
  const { user, logout, isAuthenticated } = useAuth();
  const [showTariffForm, setShowTariffForm] = useState(false);

  const { data: assistants = [], isLoading: assistantsLoading } = useQuery<Assistant[]>({
    queryKey: ["/api/assistants/my"],
    enabled: isAuthenticated,
  });

  if (!isAuthenticated || !user) {
    return null;
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const registrationDate = new Date(user.createdAt);
  const currentDate = new Date();
  const daysSinceRegistration = Math.floor(
    (currentDate.getTime() - registrationDate.getTime()) / (1000 * 60 * 60 * 24)
  );
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  const needsActivation = !user.plan || user.plan === 'free' || user.plan === null;
  const daysRemaining = Math.max(0, 3 - daysSinceRegistration);
  const showActivationWarning = needsActivation && daysSinceRegistration < 3;

  const getRoleBadge = (role: string) => {
    switch (role) {
      case 'admin':
        return <Badge variant="destructive" className="gap-1"><Crown className="w-3 h-3" />–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</Badge>;
      case 'user':
        return <Badge variant="secondary">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</Badge>;
      default:
        return <Badge variant="outline">{role}</Badge>;
    }
  };

  const getPlanBadge = (plan: string | null | undefined) => {
    switch (plan) {
      case 'pro':
        return <Badge variant="default">Pro</Badge>;
      case 'enterprise':
        return <Badge className="bg-purple-500 hover:bg-purple-600">Enterprise</Badge>;
      case 'free':
      default:
        return <Badge variant="outline">–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π</Badge>;
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 text-gray-900 dark:text-gray-100 flex flex-col">
      <div className="container mx-auto px-4 lg:px-6 py-6 lg:py-8 flex-1">
        <div className="mb-6 lg:mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-2xl lg:text-3xl font-bold">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
            <p className="text-sm lg:text-base text-gray-600 dark:text-gray-400 mt-2">
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            </p>
          </div>
          <Button
            variant="outline"
            onClick={logout}
            className="gap-2 w-full sm:w-auto"
          >
            <LogOut className="w-4 h-4" />
            –í—ã–π—Ç–∏
          </Button>
        </div>

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ */}
        {showActivationWarning && (
          <Alert className="mb-6 border-amber-200 bg-amber-50 dark:border-amber-800 dark:bg-amber-950">
            <AlertTriangle className="h-4 w-4 text-amber-600 dark:text-amber-400" />
            <AlertDescription className="text-amber-800 dark:text-amber-200">
              <div className="flex items-start gap-3">
                <Clock className="h-5 w-5 mt-0.5 flex-shrink-0" />
                <div>
                  <p className="font-semibold mb-2">
                    –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
                  </p>
                  <p className="text-sm mb-3">
                    –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {daysRemaining} {daysRemaining === 1 ? '–¥–µ–Ω—å' : '–¥–Ω—è'} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. 
                    –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å—Ä–æ–∫–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞.
                  </p>
                  <p className="text-xs font-medium mb-3">
                    ‚ö†Ô∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –≤–∫–ª—é—á–∞—è –≤–∞—à–∏—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤.
                  </p>
                  <Button 
                    onClick={() => setShowTariffForm(true)}
                    className="bg-amber-600 hover:bg-amber-700 text-white text-sm"
                    size="sm"
                  >
                    <CreditCard className="w-4 h-4 mr-2" />
                    –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ
                  </Button>
                </div>
              </div>
            </AlertDescription>
          </Alert>
        )}

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ */}
        {!user.isActive && (
          <Alert className="mb-6 border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950">
            <AlertTriangle className="h-4 w-4 text-red-600 dark:text-red-400" />
            <AlertDescription className="text-red-800 dark:text-red-200">
              <div className="flex items-start gap-3">
                <AlertTriangle className="h-5 w-5 mt-0.5 flex-shrink-0" />
                <div>
                  <p className="font-semibold mb-2">
                    –ê–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω
                  </p>
                  <p className="text-sm mb-3">
                    –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. 
                    –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
                  </p>
                  <p className="text-xs font-medium mb-3">
                    üîí –ü–æ–∫–∞ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω, –¥–æ—Å—Ç—É–ø –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º –∏ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.
                  </p>
                  <Button 
                    onClick={() => setShowTariffForm(true)}
                    className="bg-red-600 hover:bg-red-700 text-white text-sm"
                    size="sm"
                  >
                    <CreditCard className="w-4 h-4 mr-2" />
                    –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                  </Button>
                </div>
              </div>
            </AlertDescription>
          </Alert>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* User Information */}
          <div className="lg:col-span-1 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="w-5 h-5" />
                  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
                  <p className="font-medium">{user.username}</p>
                </div>
                
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">Email</p>
                  <p className="font-medium">{user.email}</p>
                </div>

                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">–†–æ–ª—å</p>
                  {getRoleBadge(user.role)}
                </div>

                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω</p>
                  {getPlanBadge(user.plan)}
                </div>

                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</p>
                  <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4" />
                    <p className="text-sm">
                      {new Date(user.createdAt).toLocaleDateString('ru-RU')}
                    </p>
                  </div>
                </div>

                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">–°—Ç–∞—Ç—É—Å</p>
                  <Badge variant={user.isActive ? "default" : "destructive"}>
                    {user.isActive ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}
                  </Badge>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="w-5 h-5" />
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</p>
                    <p className="font-medium">{user.settings?.defaultModel || 'gpt-4o'}</p>
                  </div>
                  
                  <div>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</p>
                    <Badge variant={user.settings?.autoSave ? "default" : "outline"}>
                      {user.settings?.autoSave ? "–í–∫–ª—é—á–µ–Ω–æ" : "–û—Ç–∫–ª—é—á–µ–Ω–æ"}
                    </Badge>
                  </div>

                  <div>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">–¢–µ–º–Ω–∞—è —Ç–µ–º–∞</p>
                    <Badge variant={user.settings?.darkMode ? "default" : "outline"}>
                      {user.settings?.darkMode ? "–í–∫–ª—é—á–µ–Ω–∞" : "–û—Ç–∫–ª—é—á–µ–Ω–∞"}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Assistants */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Bot className="w-5 h-5" />
                  –ú–æ–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã
                  <Badge variant="secondary" className="ml-2">
                    {assistants.length}
                  </Badge>
                </CardTitle>
                <CardDescription>
                  –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
                </CardDescription>
              </CardHeader>
              <CardContent>
                {assistantsLoading ? (
                  <div className="text-center py-8">
                    <p className="text-gray-600 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤...</p>
                  </div>
                ) : assistants.length === 0 ? (
                  <div className="text-center py-8">
                    <Bot className="w-12 h-12 mx-auto text-gray-400 mb-4" />
                    <p className="text-gray-600 dark:text-gray-400 mb-2">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤</p>
                    <p className="text-sm text-gray-500 dark:text-gray-500">
                      –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    </p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {assistants.map((assistant, index) => (
                      <div key={assistant.id}>
                        <div className="flex items-start justify-between p-4 rounded-lg border bg-white dark:bg-slate-800">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <h3 className="font-semibold">{assistant.name}</h3>
                              <Badge variant={assistant.isActive ? "default" : "secondary"}>
                                {assistant.isActive ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
                              </Badge>
                            </div>
                            
                            {assistant.description && (
                              <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                                {assistant.description}
                              </p>
                            )}
                            
                            <div className="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-500">
                              <span>–ú–æ–¥–µ–ª—å: {assistant.model}</span>
                              <span>‚Ä¢</span>
                              <span>–°–æ–∑–¥–∞–Ω: {new Date(assistant.createdAt).toLocaleDateString('ru-RU')}</span>
                              {assistant.tools && assistant.tools.length > 0 && (
                                <>
                                  <span>‚Ä¢</span>
                                  <span>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {assistant.tools.filter((t: any) => t.enabled).length}</span>
                                </>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        {index < assistants.length - 1 && <Separator className="my-2" />}
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
      
      {/* –§–æ—Ä–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ */}
      {showTariffForm && (
        <TariffActivationForm 
          isOpen={showTariffForm}
          onClose={() => setShowTariffForm(false)}
          onSuccess={() => {
            setShowTariffForm(false);
            window.location.reload(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
          }}
        />
      )}
      
      <Footer />
    </div>
  );
}